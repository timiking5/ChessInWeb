<div class="@(OpponentSide ? "opponentSide" : "playerSide") timer">
    <i class="dot @(WhiteTimer ? "white-dot" : "black-dot")"></i>
    <span>&nbsp;&nbsp;</span>
    <span>@time</span>
</div>
@code {
    [Parameter]
    public EventCallback<bool> TimeRanOut { get; set; }
    [Parameter]
    public bool OpponentSide { get; set; } = false;
    [Parameter]
    public bool WhiteTimer { get; set; } = true;
    private System.Threading.Timer timer;
    private int secondsLeft;
    private string time;
    protected override async Task OnInitializedAsync()
    {
        secondsLeft = Util.ThirstySecondsMode;
        time = TimeToFormat(secondsLeft);
        timer = new System.Threading.Timer(DecreaseTime, new AutoResetEvent(false), Timeout.Infinite, Timeout.Infinite);
    }
    private string TimeToFormat(int seconds)
    {
        return $"{seconds / 60}:{seconds % 60}";
    }
    private async void DecreaseTime(Object stateInfo)
    {
        secondsLeft--;
        if (secondsLeft == 0)
        {
            await TimeRanOut.InvokeAsync(OpponentSide);
        }
        time = TimeToFormat(secondsLeft);
        await InvokeAsync(() => StateHasChanged());
    }
    public void Stop()
    {
        timer.Change(Timeout.Infinite, Timeout.Infinite);
    }
    public void Start()
    {
        timer.Change(1000, 1000);
    }
}
