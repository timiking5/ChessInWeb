@using ChessInWeb.Hubs;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavManager
@implements IDisposable
<div class="chessboard @(isDisabled ? "disabledelement" : "")">
    <div class="squares">
        @if (userId != GameObj.BlackPlayerId)
        {
            for (int i = 63; i >= 0; i--)
            {
                int s = i - j;
                    <Square @bind-Rerender="@rerenderCount" IconSrc="@IconSrc(s)" IdNum="@s" Selected="@availableSquares.Contains(s)" HandleClick="@ManageClick"></Square>
                    j -= 2;
                    if (j < -7)
                    {
                        j = 7;
                    }
                }
            }
        else
        {
            for (int i = 0; i < 64; i++)
            {
                int s = i - i % 8 + 7 - i % 8;
                <Square @bind-Rerender="@rerenderCount" IconSrc="@IconSrc(s)" IdNum="@s" Selected="@availableSquares.Contains(s)" HandleClick="@ManageClick"></Square>
                j -= 2;
                if (j < 0)
                {
                    j = 7;
                }
            }
        }
    </div>
    <Informer WhiteSided=true TimeRanOut="@TimeRanOut" @bind-Message="informerMessage" @ref=informer
              TimeControl="@GameObj.TimeControl" Increment="@GameObj.Increment"></Informer>
</div>
@code {
    [Parameter]
    public Game GameObj { get; set; }
    private long gameId { get; set; }
    private GameManager gameManager;
    private string informerMessage = "Message from chessboard";
    private string userId;
    private int rerenderCount = 0;
    private HashSet<int> availableSquares = new();
    private int currentSelected = -1;
    private int j = 7;
    private bool isDisabled = false;
    private Informer informer;
    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        gameManager = GameObj.GameManager;
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chessmoveshub"))
        .WithAutomaticReconnect()
        .Build();

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;

        hubConnection.On<int, int, int>("RecieveMove", (a, b, c) =>
        {
            Move move = new(a, b, c);
            MakeMove(move);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();

        if (hubConnection is not null)
        {
            hubConnection.SendAsync("AddConnectionToGame", GameObj.Id).GetAwaiter().GetResult();
        }
        gameManager = GameController.GamesDictionary[GameObj.Id].GameManager;
        gameManager.GetMoves();
        informerMessage = gameManager.ReturnGameState();
        EnableBoard();
    }
    protected override void OnParametersSet()
    {
        gameManager = GameController.GamesDictionary[GameObj.Id].GameManager;
        gameManager.GetMoves();
    }
    private string resources = "/Icons/";
    private string IconSrc(int square)
    {
        string respond = "";
        switch (Piece.PieceType(gameManager.Squares[square]))
        {
            case 1:
                respond = "king";
                break;
            case 2:
                respond = "pawn";
                break;
            case 3:
                respond = "knight";
                break;
            case 5:
                respond = "bishop";
                break;
            case 6:
                respond = "rook";
                break;
            case 7:
                respond = "queen";
                break;
            default:
                return "";
        }
        string color = Piece.Colour(gameManager.Squares[square]) == 8 ? "white" : "black";
        return resources + color + respond + ".png";
    }
    private void EnableBoard()
    {
        isDisabled = !((gameManager.WhiteToMove && userId == GameObj.WhitePlayerId ||
                    !gameManager.WhiteToMove && userId == GameObj.BlackPlayerId)
                    && GameObj.WhitePlayerId is not null && GameObj.BlackPlayerId is not null);
        InvokeAsync(StateHasChanged);
    }
    public void ManageClick(int id)
    {
        if (availableSquares.Contains(id))
        {
            var move = gameManager.MovesStorage[currentSelected].Where(x => x.EndIndex == id).First();
            SynchronizeMove(move);
            return;
        }
        ClearMeta();
        if (gameManager.Squares[id] != Piece.None && gameManager.MovesStorage.ContainsKey(id))
        {
            currentSelected = id;
            gameManager.MovesStorage[id].Select(x => x.EndIndex).ToList().ForEach(x => availableSquares.Add(x));
            StateHasChanged();
            return;
        }
    }
    public async void MakeMove(Move move)
    {
        // gameManager.MakeMove(move);
        gameManager.GetMoves();
        informerMessage = gameManager.ReturnGameState();
        ClearMeta();
        CheckGameFinished();
        informer.SwitchTimer();
        EnableBoard();
        InvokeAsync(StateHasChanged);
    }
    // Makes call to hub and controller
    private async Task SynchronizeMove(Move move)
    {
        GameController.MakeMoveOnBoard(GameObj.Id, move);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMove", GameObj.Id, move.StartIndex, move.EndIndex, move.MoveFlag);
        }
    }
    private void ClearMeta()
    {
        rerenderCount++;
        currentSelected = -1;
        availableSquares.Clear();
    }
    private void CheckGameFinished()
    {
        if (informerMessage.Contains("Draw") || informerMessage.Contains("mate"))
        {
            FinishGame();
        }
    }
    private void FinishGame(bool onTime = false)
    {
        GameObj.IsFinished = true;
        if (informerMessage.Contains("Checkmate") || onTime)
        {
            GameObj.WinnerId = GameObj.GameManager.WhiteToMove ? GameObj.BlackPlayerId : GameObj.WhitePlayerId;
        }
        // call to controller
        informer.StopTimers();
        isDisabled = true;
    }
    public void TimeRanOut(bool white)
    {
        isDisabled = true;
        informer.StopTimers();
        FinishGame(true);
    }
    public void Dispose()
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("RemoveConnectionFromGame", GameObj.Id).GetAwaiter().GetResult();
        }
    }
}
